<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>TC Radios</title>
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#1DB954">
    <link rel="icon" type="image/png" sizes="192x192" href="/icons/icon-192x192.png">
    <link rel="icon" type="image/png" sizes="512x512" href="/icons/icon-512x512.png">
    <link rel="apple-touch-icon" href="/icons/icon-192x192.png">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        /* ========== BASE STYLES ========== */
        :root {
            --primary: #1DB954;
            --background: #121212;
            --surface: #181818;
            --text-primary: #FFFFFF;
            --text-secondary: #B3B3B3;
            --error: #ff3333;
            --success: #4CAF50;
        }
        .light-theme {
            --background: #ffffff;
            --surface: #f5f5f5;
            --text-primary: #000000;
            --text-secondary: #666666;
            --error: #d32f2f;
            --success: #388E3C;
        }
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', Oxygen, Ubuntu, Cantarell, sans-serif;
        }
        body {
            background: var(--background);
            color: var(--text-primary);
            height: 100vh;
            overflow: hidden;
            -webkit-tap-highlight-color: transparent;
            transition: background 0.3s, color 0.3s;
        }

        /* ========== HAMBURGER & MENU SYSTEM ========== */
        .hamburger-btn {
            width: 30px;
            height: 24px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            background: transparent;
            border: none;
            cursor: pointer;
            padding: 0;
            margin-right: 15px;
            position: relative;
            z-index: 1001;
        }
        .hamburger-btn span {
            display: block;
            width: 100%;
            height: 3px;
            background: var(--text-primary);
            transition: all 0.3s ease;
        }
        .hamburger-btn.active span:nth-child(1) {
            transform: translateY(10px) rotate(45deg);
        }
        .hamburger-btn.active span:nth-child(2) {
            opacity: 0;
        }
        .hamburger-btn.active span:nth-child(3) {
            transform: translateY(-10px) rotate(-45deg);
        }

        /* Main Menu Styles */
        .main-menu {
            position: fixed;
            top: 72px;
            left: 16px;
            background: var(--surface);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            padding: 12px;
            display: none;
            flex-direction: column;
            gap: 8px;
            z-index: 1000;
            width: 250px;
            max-height: 70vh;
            overflow-y: auto;
        }
        .main-menu.show {
            display: flex;
        }
        .menu-item {
            padding: 12px;
            border-radius: 6px;
            background: var(--background);
            color: var(--text-primary);
            border: none;
            text-align: left;
            cursor: pointer;
            transition: background 0.2s;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .menu-item:hover {
            background: rgba(255,255,255,0.1);
        }
        .menu-item.active {
            background: var(--primary);
            color: white;
        }
        .menu-item .arrow {
            transition: transform 0.2s;
        }
        .menu-item.active .arrow {
            transform: rotate(90deg);
        }

        /* Submenu Styles */
        .submenu {
            display: none;
            flex-direction: column;
            padding-left: 10px;
            border-left: 2px solid var(--primary);
            margin-top: 5px;
        }
        .submenu.show {
            display: flex;
        }
        .submenu-item {
            padding: 10px;
            border-radius: 6px;
            background: var(--background);
            color: var(--text-primary);
            border: none;
            text-align: left;
            cursor: pointer;
            transition: background 0.2s;
            margin-top: 5px;
        }
        .submenu-item:hover {
            background: rgba(255,255,255,0.1);
        }
        .submenu-item.active {
            background: var(--primary);
            color: white;
        }

        /* ========== HEADER STYLES ========== */
        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            padding: 16px;
            z-index: 1000;
            display: flex;
            align-items: center;
            background: var(--surface);
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }
        .app-title {
            font-size: 20px;
            font-weight: 600;
            flex-grow: 1;
            text-align: center;
        }
        .header-controls {
            display: flex;
            gap: 10px;
        }
        .theme-toggle, .volume-control-btn {
            background: var(--surface);
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: transform 0.2s;
            font-size: 20px;
            color: var(--text-primary);
        }
        .theme-toggle:active, .volume-control-btn:active {
            transform: scale(0.9);
        }

        /* ========== VERTICAL VOLUME CONTROL ========== */
        .volume-control-menu {
            position: absolute;
            top: 60px;
            right: 10px;
            background: var(--surface);
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            padding: 15px 8px;
            display: none;
            flex-direction: column;
            align-items: center;
            z-index: 1001;
            height: 160px;
        }
        .volume-control-menu.show {
            display: flex;
        }
        .volume-slider-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100%;
            justify-content: space-between;
        }
        .volume-slider {
            -webkit-appearance: slider-vertical;
            width: 6px;
            height: 120px;
            margin: 10px 0;
            background: transparent;
            padding: 0 5px;
        }
        .volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            background: var(--primary);
            border-radius: 50%;
            cursor: pointer;
            margin-left: -5px;
            position: relative;
            z-index: 1;
        }
        .volume-slider::-webkit-slider-runnable-track {
            width: 4px;
            background: var(--text-secondary);
            border-radius: 2px;
            margin: 0 -5px;
        }
        .mute-btn {
            background: transparent;
            border: none;
            color: var(--text-primary);
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            margin-top: 8px;
            font-size: 20px;
        }
        .mute-btn:hover {
            color: var(--primary);
        }

        /* ========== MAIN CONTAINER ========== */
        .app-container {
            max-width: 500px;
            margin: 0 auto;
            height: 100vh;
            position: relative;
            padding-top: 80px;
            display: flex;
            flex-direction: column;
        }

        /* ========== TABS STYLES ========== */
        .tabs {
            display: flex;
            gap: 8px;
            padding: 0 16px 16px;
            position: sticky;
            top: 72px;
            background: var(--background);
            z-index: 999;
        }
        .tab-button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: var(--surface);
            color: var(--text-primary);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        .tab-button.active {
            background: var(--primary);
            color: white;
        }

        /* ========== SEARCH BAR ========== */
        .search-bar {
            padding: 0 16px 16px;
        }
        .search-bar input {
            width: 100%;
            padding: 12px;
            border: none;
            border-radius: 8px;
            background: var(--surface);
            color: var(--text-primary);
            font-size: 16px;
            outline: none;
        }

        /* ========== STATION LIST - UPDATED FOR BETTER VISIBILITY ========== */
       .station-list {
    flex: 1;
    padding: 0 16px 80px;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
}

        .station-item {
            display: flex;
            align-items: center;
            padding: 18px 16px;
            margin-bottom: 14px;
            background: var(--surface);
            border-radius: 12px;
            transition: transform 0.2s;
            position: relative;
            min-height: 80px;
        }
        .station-item.playing {
            border-left: 4px solid var(--primary);
        }
        .station-item:active {
            transform: scale(0.98);
        }
        .station-artwork {
            width: 70px;
            height: 70px;
            border-radius: 8px;
            margin-right: 20px;
            object-fit: cover;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        .station-info {
            flex: 1;
        }
        .station-name {
            font-weight: 500;
            margin-bottom: 8px;
            font-size: 1.2rem;
        }
        .station-genre {
            color: var(--text-secondary);
            font-size: 1rem;
        }
        .station-actions {
            display: flex;
            gap: 12px;
            margin-left: auto;
            padding-left: 16px;
        }
        .action-btn {
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            transition: color 0.2s;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .action-btn.active {
            color: var(--primary);
        }
        .now-playing-indicator {
            position: absolute;
            right: 16px;
            top: 16px;
            width: 8px;
            height: 8px;
            background-color: var(--primary);
            border-radius: 50%;
            display: none;
        }
        .station-item.playing .now-playing-indicator {
            display: block;
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(0.95); opacity: 0.7; }
            50% { transform: scale(1.1); opacity: 1; }
            100% { transform: scale(0.95); opacity: 0.7; }
        }

        /* Responsive adjustments for station items */
        @media (max-width: 400px) {
            .station-item {
                padding: 16px 12px;
                min-height: 75px;
            }
            
            .station-name {
                font-size: 1.1rem;
            }
            
            .station-artwork {
                width: 65px;
                height: 65px;
                margin-right: 16px;
            }
        }

        @media (max-width: 360px) {
            .station-item {
                padding: 14px 10px;
                min-height: 70px;
            }
            
            .station-name {
                font-size: 1rem;
            }
            
            .station-genre {
                font-size: 0.9rem;
            }
            
            .station-artwork {
                width: 60px;
                height: 60px;
                margin-right: 14px;
            }
        }

        /* ========== PLAYER CONTROLS ========== */
        .player-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: var(--surface);
            padding: 16px;
            border-radius: 16px 16px 0 0;
            box-shadow: 0 -4px 24px rgba(0,0,0,0.3);
            z-index: 100;
        }
        .player-content {
            display: flex;
            align-items: center;
            gap: 16px;
        }
        .player-artwork {
            width: 56px;
            height: 56px;
            border-radius: 8px;
            object-fit: cover;
            animation: spin 10s linear infinite;
            animation-play-state: paused;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .player-artwork.playing {
            animation-play-state: running;
        }
        .player-info {
            flex: 1;
            min-width: 0;
        }
        .player-title {
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .player-metadata {
            font-size: 14px;
            color: var(--text-secondary);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .control-button {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: var(--primary);
            border: none;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        /* ========== SLEEP TIMER ========== */
        .floating-timer {
            position: fixed;
            bottom: 80px;
            right: 20px;
            z-index: 1000;
            cursor: grab;
            user-select: none;
        }
        .timer-icon {
            width: 48px;
            height: 48px;
            background: var(--primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s;
        }
        .timer-icon:active {
            transform: scale(0.9);
        }
        .timer-menu {
            position: absolute;
            bottom: 60px;
            right: 0;
            background: var(--surface);
            padding: 12px;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            display: none;
            flex-direction: column;
            gap: 8px;
        }
        .timer-menu select {
            padding: 8px;
            border-radius: 8px;
            border: 1px solid var(--text-secondary);
            background: var(--surface);
            color: var(--text-primary);
            cursor: pointer;
            outline: none;
        }
        .timer-menu button {
            padding: 8px;
            border-radius: 8px;
            border: none;
            background: var(--primary);
            color: white;
            cursor: pointer;
            outline: none;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .timer-display {
            position: absolute;
            top: -25px;
            right: 0;
            background: var(--primary);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            display: none;
        }
        .timer-active .timer-display {
            display: block;
        }

        /* ========== LOADING OVERLAY ========== */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 2000;
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        /* ========== ABOUT PAGE STYLES ========== */
        .about-content {
            padding: 16px;
            display: none;
            line-height: 1.6;
            height: calc(100vh - 220px);
            overflow-y: auto;
            -webkit-overflow-scrolling: touch;
        }
        .contact-section {
            background: var(--surface);
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
        }
        .contact-section h3 {
            color: var(--primary);
            margin-bottom: 15px;
        }
        .social-links a {
            color: var(--primary);
            text-decoration: none;
            margin-right: 15px;
        }

        /* ========== METADATA DISPLAY ========== */
        .song-progress {
            height: 3px;
            background: rgba(255,255,255,0.2);
            margin-top: 8px;
            position: relative;
        }
        .song-progress::after {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            background: var(--primary);
            width: var(--progress);
            transition: width 0.3s ease;
        }
        #currentSong {
            font-size: 14px;
            color: var(--text-secondary);
            display: block;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* ========== INSTALL PROMPT ========== */
        .install-prompt {
            position: fixed;
            bottom: -100px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--surface);
            padding: 16px;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            transition: bottom 0.3s ease;
            z-index: 2000;
            max-width: 300px;
            width: 90%;
            text-align: center;
        }
        .install-prompt.show {
            bottom: 100px;
        }
        .install-content p {
            margin-bottom: 12px;
            color: var(--text-primary);
        }
        .install-buttons {
            display: flex;
            gap: 8px;
            justify-content: center;
        }
        #installConfirm, #installCancel {
            padding: 8px 16px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
        }
        #installConfirm {
            background: var(--primary);
            color: white;
        }
        #installCancel {
            background: var(--background);
            color: var(--text-primary);
        }

        /* ========== ERROR MESSAGES ========== */
        .error-message {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--error);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            z-index: 2000;
            animation: fadeInOut 3s forwards;
            max-width: 80%;
            text-align: center;
        }
        @keyframes fadeInOut {
            0% { opacity: 0; bottom: 0; }
            10% { opacity: 1; bottom: 20px; }
            90% { opacity: 1; bottom: 20px; }
            100% { opacity: 0; bottom: 0; }
        }

        /* ========== REFRESH BUTTON ========== */
        .refresh-btn {
            position: fixed;
            top: 80px;
            right: 20px;
            background: var(--surface);
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: transform 0.2s;
            font-size: 20px;
            color: var(--text-primary);
            z-index: 999;
        }
        .refresh-btn:active {
            transform: rotate(360deg);
        }

        /* ========== HISTORY TAB ========== */
        .history-item {
            display: flex;
            align-items: center;
            padding: 12px;
            margin-bottom: 8px;
            background: var(--surface);
            border-radius: 8px;
            transition: transform 0.2s;
        }
        .history-item:active {
            transform: scale(0.98);
        }
        .history-time {
            font-size: 12px;
            color: var(--text-secondary);
            margin-right: 12px;
            min-width: 50px;
        }

        /* ========== LANGUAGE LOADING INDICATOR ========== */
        .language-loading {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: var(--surface);
            padding: 16px;
            border-radius: 8px;
            z-index: 2000;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        .language-loading.show {
            display: block;
        }

        /* ========== DESKTOP RESPONSIVE ADJUSTMENTS ========== */
        @media (min-width: 768px) {
            .app-container {
                max-width: 800px;
                padding-top: 100px;
            }
            .station-list {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                padding: 0 20px 80px;
                height: auto;
                max-height: calc(100vh - 280px);
            }
            .station-item {
                margin-bottom: 0;
                padding: 20px;
                transition: transform 0.2s, box-shadow 0.2s;
                min-height: 90px;
            }
            .station-item:hover {
                transform: translateY(-3px);
                box-shadow: 0 8px 24px rgba(0,0,0,0.2);
            }
            .station-name {
                font-size: 1.3rem;
            }
            .player-container {
                max-width: 800px;
                width: 90%;
                margin: 0 auto;
                padding: 24px;
                border-radius: 16px;
                bottom: 20px;
                z-index: 999;
            }
            .player-artwork {
                width: 72px;
                height: 72px;
            }
            .player-title {
                font-size: 1.2rem;
            }
            .player-metadata {
                font-size: 1rem;
            }
            .control-button {
                width: 56px;
                height: 56px;
            }
            .control-button svg {
                width: 28px;
                height: 28px;
            }
            .header {
                max-width: 800px;
                margin: 0 auto;
                border-radius: 0 0 16px 16px;
                left: 50%;
                transform: translateX(-50%);
                right: auto;
                width: 100%;
            }
            .floating-timer {
                right: calc(50% - 400px + 40px);
                bottom: 120px;
                transform: scale(1.1);
                transition: transform 0.2s;
                z-index: 1000;
            }
            .floating-timer:hover {
                transform: scale(1.2);
            }
            .tabs {
                max-width: 800px;
                margin: 0 auto;
            }
            .volume-control-menu {
                right: calc(50% - 400px + 40px);
                top: 80px;
            }
            .main-menu {
                left: calc(50% - 400px + 16px);
                top: 80px;
            }
            .refresh-btn {
                right: calc(50% - 400px + 40px);
                top: 80px;
            }
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-spinner"></div>
    </div>

    <!-- Language Loading Indicator -->
    <div class="language-loading" id="languageLoading">
        Loading stations...
    </div>

    <!-- Header with Hamburger Menu -->
    <div class="header">
        <button class="hamburger-btn" id="hamburgerBtn" aria-label="Menu">
            <span></span>
            <span></span>
            <span></span>
        </button>
        
        <!-- Main Menu -->
        <div class="main-menu" id="mainMenu">
            <button class="menu-item" id="languageMenuBtn">
                Radios in other languages
                <span class="arrow">›</span>
            </button>
            <div class="submenu" id="languageSubmenu">
                <button class="submenu-item" data-lang="tamil">Tamil Stations</button>
                <button class="submenu-item" data-lang="dutch">Dutch Stations</button>
                <button class="submenu-item" data-lang="malayalam">Malayalam Stations</button>
                <!-- Add more languages as needed -->
            </div>
            
            <button class="menu-item" id="settingsMenuBtn">
                App Settings
                <span class="arrow">›</span>
            </button>
            <div class="submenu" id="settingsSubmenu">
                <button class="submenu-item" id="themeToggleMenu">Toggle Theme</button>
                <button class="submenu-item" id="resetFavorites">Reset Favorites</button>
                <button class="submenu-item" id="clearHistory">Clear History</button>
            </div>
            
            <button class="menu-item" id="aboutMenuBtn">
                About TC Radios
            </button>
        </div>
        
        <div class="app-title">TC RADIOS</div>
        <div class="header-controls">
            <button class="volume-control-btn" id="volumeControlBtn" aria-label="Volume control">
                <i class="fas fa-volume-up"></i>
            </button>
            <div class="volume-control-menu" id="volumeControlMenu">
                <div class="volume-slider-container">
                    <i class="fas fa-volume-up"></i>
                    <input type="range" min="0" max="1" step="0.01" value="1" 
                           class="volume-slider" id="volumeSlider" orient="vertical" aria-label="Volume slider">
                    <i class="fas fa-volume-down"></i>
                    <button class="mute-btn" id="muteBtn" aria-label="Mute">
                        <i class="fas fa-volume-mute"></i>
                    </button>
                </div>
            </div>
            <button class="theme-toggle" id="themeToggle" aria-label="Toggle theme">🌓</button>
        </div>
    </div>

    <!-- Main Container -->
    <div class="app-container">
        <!-- Refresh Button -->
        <button class="refresh-btn" id="refreshBtn" aria-label="Refresh stations">
            <i class="fas fa-sync-alt"></i>
        </button>

        <!-- Tabs -->
        <div class="tabs">
            <button class="tab-button active" id="allTab">All Stations</button>
            <button class="tab-button" id="favoritesTab">Favorites</button>
            <button class="tab-button" id="historyTab">History</button>
            <button class="tab-button" id="aboutTab">About</button>
        </div>

        <!-- Search -->
        <div class="search-bar">
            <input type="text" id="searchInput" placeholder="Search stations..." aria-label="Search stations" />
        </div>

        <!-- Station List -->
        <div class="station-list" id="stationList"></div>

        <!-- History List -->
        <div class="station-list" id="historyList" style="display: none;"></div>

        <!-- About Content -->
        <div class="about-content" id="aboutContent">
            <div class="contact-section">
                <h3>Contact Information</h3>
                <div class="contact-details">
                    <p>📻 Developed by: JayathaSoft</p>
                    <p>📧 Email: simsonpeter@gmail.com</p>
                    <p>📍 Address: Antwerp, Belgium</p>
                </div>
            </div>
            <div class="contact-section">
                <h3>Connect With Us</h3>
                <div class="social-links">
                    <a href="https://twitter.com/" target="_blank" rel="noopener noreferrer">Twitter</a>
                    <a href="https://facebook.com/" target="_blank" rel="noopener noreferrer">Facebook</a>
                </div>
            </div>
            <div class="contact-section">
                <h3>About TC Radios</h3>
                <p>TC Radios is a passion project dedicated to bringing radio stations in multiple languages to listeners worldwide.</p>
                <p>Version: 6.0.0</p>
            </div>
        </div>

        <!-- Player -->
        <div class="player-container">
            <div class="player-content">
                <img src="/icons/default-artwork.jpg" class="player-artwork" id="playerArtwork" alt="Now playing">
                <div class="player-info">
                    <div class="player-title" id="playerTitle">Select a station</div>
                    <div class="player-metadata" id="playerMetadata">
                        <span id="currentSong">No song info available</span>
                        <div class="song-progress" id="songProgress"></div>
                    </div>
                </div>
                <button class="control-button" id="playPauseBtn" aria-label="Play/pause">
                    <svg width="24" height="24" viewBox="0 0 24 24" id="playIcon">
                        <path fill="currentColor" d="M8 5v14l11-7z"/>
                    </svg>
                    <svg width="24" height="24" viewBox="0 0 24 24" id="pauseIcon" style="display: none;">
                        <path fill="currentColor" d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Sleep Timer -->
        <div class="floating-timer" id="floatingTimer">
            <div class="timer-display" id="timerDisplay"></div>
            <div class="timer-icon" id="timerIcon" aria-label="Sleep timer">
                <i class="fas fa-clock"></i>
            </div>
            <div class="timer-menu" id="timerMenu">
                <select id="timerSelect" aria-label="Timer duration">
                    <option value="0">Off</option>
                    <option value="5">5 minutes</option>
                    <option value="10">10 minutes</option>
                    <option value="15">15 minutes</option>
                    <option value="30">30 minutes</option>
                    <option value="60">60 minutes</option>
                </select>
                <button id="setTimerBtn" aria-label="Set timer">
                    <i class="fas fa-check"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Installation Prompt -->
    <div id="installPrompt" class="install-prompt">
        <div class="install-content">
            <p>Install TC Radios App for better experience?</p>
            <div class="install-buttons">
                <button id="installCancel">Not Now</button>
                <button id="installConfirm">Install</button>
            </div>
        </div>
    </div>

    <script>
        // Language-specific station URLs
        const LANGUAGE_STATIONS = {
            tamil: 'https://raw.githubusercontent.com/simsonpeter/Tcradios/refs/heads/main/stations.json',
            dutch: 'https://raw.githubusercontent.com/simsonpeter/Tcradios/refs/heads/main/languages/dutch.json',
            malayalam: 'https://raw.githubusercontent.com/simsonpeter/Tcradios/refs/heads/main/languages/malayalam.json'
        };

        let customStations = [];
        const audio = new Audio();
        audio.crossOrigin = "anonymous";
        let currentStation = null;
        let favorites = JSON.parse(localStorage.getItem('radioFavorites')) || [];
        let stationHistory = JSON.parse(localStorage.getItem('stationHistory')) || [];
        let currentView = 'all';
        let timer = null;
        let timerInterval;
        let metadataInterval;
        let audioContext, analyser;
        let currentLanguage = 'tamil';
        let isMuted = false;
        let lastVolume = 1;

        // DOM Elements
        const hamburgerBtn = document.getElementById('hamburgerBtn');
        const mainMenu = document.getElementById('mainMenu');
        const languageMenuBtn = document.getElementById('languageMenuBtn');
        const languageSubmenu = document.getElementById('languageSubmenu');
        const settingsMenuBtn = document.getElementById('settingsMenuBtn');
        const settingsSubmenu = document.getElementById('settingsSubmenu');
        const aboutMenuBtn = document.getElementById('aboutMenuBtn');
        const languageOptions = document.querySelectorAll('.submenu-item[data-lang]');
        const themeToggle = document.getElementById('themeToggle');
        const volumeControlBtn = document.getElementById('volumeControlBtn');
        const volumeControlMenu = document.getElementById('volumeControlMenu');
        const volumeSlider = document.getElementById('volumeSlider');
        const muteBtn = document.getElementById('muteBtn');
        const refreshBtn = document.getElementById('refreshBtn');
        const timerIcon = document.getElementById('timerIcon');
        const timerMenu = document.getElementById('timerMenu');
        const timerSelect = document.getElementById('timerSelect');
        const timerDisplay = document.getElementById('timerDisplay');
        const floatingTimer = document.getElementById('floatingTimer');
        const languageLoading = document.getElementById('languageLoading');

        // Initialize the app
        function initApp() {
            setupEventListeners();
            loadStations();
            
            // Check for saved theme
            if(localStorage.getItem('theme') === 'light') {
                document.body.classList.add('light-theme');
                themeToggle.textContent = '🌙';
            }
            
            // Initialize volume
            if(localStorage.getItem('volume')) {
                audio.volume = parseFloat(localStorage.getItem('volume'));
                volumeSlider.value = audio.volume;
            } else {
                audio.volume = 1;
                volumeSlider.value = 1;
            }
            
            // Check if timer was active
            if(localStorage.getItem('timerEndTime')) {
                const endTime = parseInt(localStorage.getItem('timerEndTime'));
                const remaining = Math.round((endTime - Date.now()) / 60000);
                if(remaining > 0) {
                    timerSelect.value = remaining;
                    setTimer(remaining);
                } else {
                    localStorage.removeItem('timerEndTime');
                }
            }
            
            // Register service worker
            if ('serviceWorker' in navigator) {
                navigator.serviceWorker.register('/sw.js')
                    .then(registration => {
                        console.log('SW registered:', registration);
                    })
                    .catch(error => console.log('SW registration failed:', error));
            }
        }

        // Setup all event listeners
        function setupEventListeners() {
            // Hamburger menu
            hamburgerBtn.addEventListener('click', toggleMainMenu);
            document.addEventListener('click', closeMenusOnClickOutside);
            
            // Menu items
            languageMenuBtn.addEventListener('click', toggleLanguageMenu);
            settingsMenuBtn.addEventListener('click', toggleSettingsMenu);
            aboutMenuBtn.addEventListener('click', () => {
                showTab('about');
                closeMainMenu();
            });
            
            // Language selection
            languageOptions.forEach(option => {
                option.addEventListener('click', handleLanguageSelection);
            });
            
            // Settings
            document.getElementById('themeToggleMenu').addEventListener('click', toggleThemeFromMenu);
            document.getElementById('resetFavorites').addEventListener('click', resetFavorites);
            document.getElementById('clearHistory').addEventListener('click', clearHistory);
            
            // Theme toggle
            themeToggle.addEventListener('click', toggleTheme);
            
            // Volume control
            volumeControlBtn.addEventListener('click', toggleVolumeMenu);
            volumeSlider.addEventListener('input', handleVolumeChange);
            muteBtn.addEventListener('click', toggleMute);
            
            // Refresh button
            refreshBtn.addEventListener('click', refreshStations);
            
            // Tabs
            document.getElementById('allTab').addEventListener('click', () => showTab('all'));
            document.getElementById('favoritesTab').addEventListener('click', () => showTab('favorites'));
            document.getElementById('historyTab').addEventListener('click', () => showTab('history'));
            document.getElementById('aboutTab').addEventListener('click', () => showTab('about'));
            
            // Search
            document.getElementById('searchInput').addEventListener('input', handleSearch);
            
            // Player
            document.getElementById('playPauseBtn').addEventListener('click', togglePlayback);
            
            // Timer
            timerIcon.addEventListener('click', toggleTimerMenu);
            document.getElementById('setTimerBtn').addEventListener('click', setTimerFromMenu);
            
            // PWA installation
            window.addEventListener('beforeinstallprompt', handleInstallPrompt);
            document.getElementById('installConfirm').addEventListener('click', installApp);
            document.getElementById('installCancel').addEventListener('click', cancelInstall);
            
            // Audio events
            audio.addEventListener('play', handleAudioPlay);
            audio.addEventListener('pause', handleAudioPause);
            audio.addEventListener('error', handleAudioError);
        }

        // Menu functions
        function toggleMainMenu(e) {
            e.stopPropagation();
            this.classList.toggle('active');
            mainMenu.classList.toggle('show');
            
            if (!mainMenu.classList.contains('show')) {
                closeAllSubmenus();
            }
        }

        function closeMainMenu() {
            hamburgerBtn.classList.remove('active');
            mainMenu.classList.remove('show');
            closeAllSubmenus();
        }

        function closeAllSubmenus() {
            document.querySelectorAll('.submenu').forEach(sub => {
                sub.classList.remove('show');
            });
            document.querySelectorAll('.menu-item').forEach(item => {
                item.classList.remove('active');
            });
        }

        function closeMenusOnClickOutside(e) {
            if (!e.target.closest('.hamburger-btn') && !e.target.closest('.main-menu')) {
                closeMainMenu();
            }
            
            if(!e.target.closest('.volume-control-btn') && !e.target.closest('.volume-control-menu')) {
                volumeControlMenu.classList.remove('show');
            }
            
            if(!e.target.closest('.floating-timer')) {
                timerMenu.style.display = 'none';
            }
        }

        function toggleLanguageMenu(e) {
            e.stopPropagation();
            this.classList.toggle('active');
            languageSubmenu.classList.toggle('show');
            
            // Highlight current language
            languageOptions.forEach(option => {
                option.classList.toggle('active', option.dataset.lang === currentLanguage);
            });
        }

        function toggleSettingsMenu(e) {
            e.stopPropagation();
            this.classList.toggle('active');
            settingsSubmenu.classList.toggle('show');
        }

        // Language functions
        function handleLanguageSelection() {
            const selectedLang = this.dataset.lang;
            if (currentLanguage !== selectedLang) {
                currentLanguage = selectedLang;
                showLanguageLoading();
                loadStations();
                
                // Update active state
                languageOptions.forEach(opt => {
                    opt.classList.toggle('active', opt.dataset.lang === selectedLang);
                });
            }
        }

        function showLanguageLoading() {
            languageLoading.classList.add('show');
            setTimeout(() => {
                languageLoading.classList.remove('show');
            }, 2000);
        }

        // Theme functions
        function toggleTheme() {
            document.body.classList.toggle('light-theme');
            const isLight = document.body.classList.contains('light-theme');
            localStorage.setItem('theme', isLight ? 'light' : 'dark');
            themeToggle.textContent = isLight ? '🌙' : '☀️';
        }

        function toggleThemeFromMenu() {
            toggleTheme();
            closeMainMenu();
        }

        // Volume functions
        function toggleVolumeMenu(e) {
            e.stopPropagation();
            volumeControlMenu.classList.toggle('show');
        }

        function handleVolumeChange(e) {
            const volume = parseFloat(e.target.value);
            audio.volume = volume;
            localStorage.setItem('volume', volume);
            
            if(volume === 0) {
                isMuted = true;
                updateMuteButton();
            } else if(isMuted) {
                isMuted = false;
                updateMuteButton();
            }
            
            updateVolumeIcon(volume);
        }

        function toggleMute() {
            isMuted = !isMuted;
            
            if(isMuted) {
                lastVolume = audio.volume;
                audio.volume = 0;
                volumeSlider.value = 0;
            } else {
                audio.volume = lastVolume;
                volumeSlider.value = lastVolume;
            }
            
            updateMuteButton();
            updateVolumeIcon(audio.volume);
        }

        function updateMuteButton() {
            const icon = muteBtn.querySelector('i');
            icon.className = isMuted ? 'fas fa-volume-up' : 'fas fa-volume-mute';
        }

        function updateVolumeIcon(volume) {
            const icon = volumeControlBtn.querySelector('i');
            
            if(volume === 0 || isMuted) {
                icon.className = 'fas fa-volume-mute';
            } else if(volume < 0.5) {
                icon.className = 'fas fa-volume-down';
            } else {
                icon.className = 'fas fa-volume-up';
            }
        }

        // Station functions
        async function loadStations() {
            try {
                showLoading(true);
                const response = await fetch(LANGUAGE_STATIONS[currentLanguage]);
                if (!response.ok) throw new Error('Failed to load stations');
                customStations = await response.json();
                localStorage.setItem(`cachedStations_${currentLanguage}`, JSON.stringify(customStations));
                initStations();
                showLoading(false);
                showSuccessMessage('Stations loaded successfully');
            } catch (error) {
                console.error('Using cached stations:', error);
                showLoading(false);
                const cached = localStorage.getItem(`cachedStations_${currentLanguage}`);
                if (cached) {
                    customStations = JSON.parse(cached);
                    initStations();
                    showErrorMessage('Using cached stations. Check your connection.');
                } else {
                    showErrorMessage('Failed to load stations. Please try again later.');
                }
            }
        }

        function refreshStations() {
            // Add rotation animation
            refreshBtn.style.transform = 'rotate(360deg)';
            refreshBtn.style.transition = 'transform 0.5s ease';
            
            // Reset rotation after animation completes
            setTimeout(() => {
                refreshBtn.style.transform = 'rotate(0deg)';
            }, 500);
            
            loadStations();
        }

        function initStations() {
            renderStations(customStations);
            updateFavoriteButtons();
        }

        function createStationItem(station) {
            const item = document.createElement('div');
            item.className = 'station-item';
            item.innerHTML = `
                <div class="now-playing-indicator"></div>
                <img src="${station.logo}" class="station-artwork" alt="${station.name}" loading="lazy" onerror="this.src='/icons/default-station.png'">
                <div class="station-info">
                    <div class="station-name">${station.name}</div>
                    <div class="station-genre">${station.genre}</div>
                </div>
                <div class="station-actions">
                    <button class="action-btn favorite-btn" aria-label="Add to favorites">
                        <svg width="24" height="24" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
                        </svg>
                    </button>
                </div>
            `;
            
            // Highlight if currently playing
            if (currentStation && currentStation.url === station.url) {
                item.classList.add('playing');
            }
            
            item.querySelector('.favorite-btn').addEventListener('click', (e) => {
                e.stopPropagation();
                toggleFavorite(station);
            });
            
            item.addEventListener('click', () => playStation(station));
            return item;
        }

        function renderStations(stations) {
            const list = document.getElementById('stationList');
            list.innerHTML = '';
            
            if (stations.length === 0) {
                const emptyMessage = document.createElement('div');
                emptyMessage.className = 'station-item';
                emptyMessage.textContent = currentView === 'favorites' ? 'No favorites yet' : 'No stations found';
                list.appendChild(emptyMessage);
                return;
            }
            
            stations.forEach(station => {
                list.appendChild(createStationItem(station));
            });
            
            updateFavoriteButtons();
        }

        function renderHistory() {
            const list = document.getElementById('historyList');
            list.innerHTML = '';
            
            if (stationHistory.length === 0) {
                const emptyMessage = document.createElement('div');
                emptyMessage.className = 'station-item';
                emptyMessage.textContent = 'No history yet';
                list.appendChild(emptyMessage);
                return;
            }
            
            stationHistory.forEach(item => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item';
                
                const time = new Date(item.timestamp);
                const timeString = time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                
                historyItem.innerHTML = `
                    <div class="history-time">${timeString}</div>
                    <img src="${item.station.logo}" class="station-artwork" alt="${item.station.name}" loading="lazy" onerror="this.src='/icons/default-station.png'">
                    <div class="station-info">
                        <div class="station-name">${item.station.name}</div>
                        <div class="station-genre">${item.station.genre}</div>
                    </div>
                `;
                
                historyItem.addEventListener('click', () => playStation(item.station));
                list.appendChild(historyItem);
            });
        }

        // Favorites System
        function toggleFavorite(station) {
            const index = favorites.findIndex(f => f.url === station.url);
            if(index === -1) {
                favorites.push(station);
                showSuccessMessage('Added to favorites');
            } else {
                favorites.splice(index, 1);
                showSuccessMessage('Removed from favorites');
            }
            localStorage.setItem('radioFavorites', JSON.stringify(favorites));
            updateFavoriteButtons();
            if(currentView === 'favorites') showFavorites();
        }

        function updateFavoriteButtons() {
            document.querySelectorAll('.favorite-btn').forEach(btn => {
                const stationItem = btn.closest('.station-item');
                const stationName = stationItem.querySelector('.station-name').textContent;
                const isFavorite = favorites.some(f => f.name === stationName);
                btn.classList.toggle('active', isFavorite);
            });
        }

        function resetFavorites() {
            if (confirm('Are you sure you want to reset all favorites?')) {
                favorites = [];
                localStorage.setItem('radioFavorites', JSON.stringify(favorites));
                if (currentView === 'favorites') {
                    renderStations(favorites);
                }
                updateFavoriteButtons();
                showSuccessMessage('Favorites cleared');
            }
            closeMainMenu();
        }

        function clearHistory() {
            if (confirm('Are you sure you want to clear your listening history?')) {
                stationHistory = [];
                localStorage.setItem('stationHistory', JSON.stringify(stationHistory));
                if (currentView === 'history') {
                    renderHistory();
                }
                showSuccessMessage('History cleared');
            }
            closeMainMenu();
        }

        // Audio Handling
        function initAudioContext() {
            if (!audioContext) {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                const source = audioContext.createMediaElementSource(audio);
                source.connect(analyser);
                analyser.connect(audioContext.destination);
            }
        }

        function updateVisualizer() {
            analyser.fftSize = 256;
            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Uint8Array(bufferLength);
            const progressElement = document.getElementById('songProgress');
            
            function draw() {
                requestAnimationFrame(draw);
                analyser.getByteFrequencyData(dataArray);
                const average = dataArray.reduce((a, b) => a + b) / bufferLength;
                progressElement.style.setProperty('--progress', `${average}%`);
            }
            draw();
        }

        async function fetchMetadata() {
            try {
                const proxyURL = 'https://api.allorigins.win/raw?url=';
                const response = await fetch(proxyURL + encodeURIComponent(currentStation.url), {
                    headers: {
                        'Icy-MetaData': '1'
                    }
                });
                const metaint = parseInt(response.headers.get('icy-metaint'));
                if (!metaint) return null;
                
                const reader = response.body.getReader();
                let buffer = new Uint8Array();
                let bytesRead = 0;
                
                while(true) {
                    const { done, value } = await reader.read();
                    if(done) break;
                    
                    const newBuffer = new Uint8Array(buffer.length + value.length);
                    newBuffer.set(buffer);
                    newBuffer.set(value, buffer.length);
                    buffer = newBuffer;
                    
                    while(bytesRead + metaint <= buffer.length) {
                        const metadataLength = buffer[bytesRead + metaint] * 16;
                        const metadataStart = bytesRead + metaint + 1;
                        const metadataEnd = metadataStart + metadataLength;
                        
                        if(metadataEnd > buffer.length) break;
                        
                        const metadataBytes = buffer.subarray(metadataStart, metadataEnd);
                        const metadata = new TextDecoder().decode(metadataBytes);
                        const title = metadata.split('StreamTitle=')[1]?.split(';')[0]?.replace(/'/g, '');
                        
                        if(title) return title;
                        
                        bytesRead += metaint + 1 + metadataLength;
                    }
                }
            } catch(error) {
                console.error('Metadata error:', error);
                return null;
            }
        }

        async function updateMetadataDisplay() {
            try {
                const title = await fetchMetadata();
                document.getElementById('currentSong').textContent = title || currentStation.genre;
            } catch {
                document.getElementById('currentSong').textContent = currentStation.genre;
            }
        }

        function playStation(station) {
            if(currentStation?.url === station.url) return togglePlayback();
            
            // Add to history
            addToHistory(station);
            
            currentStation = station;
            audio.src = station.url;
            audio.play().then(() => {
                document.getElementById('playerArtwork').src = station.logo;
                document.getElementById('playerArtwork').alt = `${station.name} logo`;
                document.getElementById('playerTitle').textContent = station.name;
                document.getElementById('playerArtwork').classList.add('playing');
                updatePlayButton(true);
                
                // Update now playing indicators
                document.querySelectorAll('.station-item').forEach(item => {
                    item.classList.remove('playing');
                });
                document.querySelectorAll('.station-item').forEach(item => {
                    if (item.querySelector('.station-name').textContent === station.name) {
                        item.classList.add('playing');
                    }
                });
                
                if(!audioContext) initAudioContext();
                updateVisualizer();
                
                // Clear previous metadata interval
                clearInterval(metadataInterval);
                metadataInterval = setInterval(updateMetadataDisplay, 5000);
            }).catch(handleAudioError);
        }

        function addToHistory(station) {
            // Check if already in history
            const existingIndex = stationHistory.findIndex(item => item.station.url === station.url);
            
            if (existingIndex !== -1) {
                // Update timestamp if already exists
                stationHistory[existingIndex].timestamp = Date.now();
            } else {
                // Add new entry
                stationHistory.unshift({
                    station: station,
                    timestamp: Date.now()
                });
                
                // Keep only last 20 items
                if (stationHistory.length > 20) {
                    stationHistory.pop();
                }
            }
            
            // Save to localStorage
            localStorage.setItem('stationHistory', JSON.stringify(stationHistory));
            
            // Update history view if active
            if (currentView === 'history') {
                renderHistory();
            }
        }

        function togglePlayback() {
            if(audio.paused) {
                audio.play();
                document.getElementById('playerArtwork').classList.add('playing');
                updatePlayButton(true);
                metadataInterval = setInterval(updateMetadataDisplay, 5000);
            } else {
                audio.pause();
                document.getElementById('playerArtwork').classList.remove('playing');
                updatePlayButton(false);
                clearInterval(metadataInterval);
            }
        }

        function updatePlayButton(playing) {
            document.getElementById('playIcon').style.display = playing ? 'none' : 'block';
            document.getElementById('pauseIcon').style.display = playing ? 'block' : 'none';
        }

        function handleAudioPlay() {
            updatePlayButton(true);
            document.getElementById('playerArtwork').classList.add('playing');
        }

        function handleAudioPause() {
            updatePlayButton(false);
            document.getElementById('playerArtwork').classList.remove('playing');
        }

        function handleAudioError(error) {
            console.error('Audio error:', error);
            showErrorMessage('Error playing station. Trying again...');
            if(currentStation) setTimeout(() => audio.play(), 5000);
        }

        // Tab Management
        function showTab(tab) {
            currentView = tab;
            
            // Update active tab button
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.getElementById(`${tab}Tab`).classList.add('active');
            
            // Show/hide appropriate content
            document.getElementById('stationList').style.display = (tab === 'about' || tab === 'history') ? 'none' : 'block';
            document.getElementById('historyList').style.display = tab === 'history' ? 'block' : 'none';
            document.getElementById('aboutContent').style.display = tab === 'about' ? 'block' : 'none';
            document.getElementById('searchInput').style.display = tab === 'about' ? 'none' : 'block';
            
            // Load appropriate content
            if(tab === 'favorites') renderStations(favorites);
            else if(tab === 'all') renderStations(customStations);
            else if(tab === 'history') renderHistory();
        }

        // Search Functionality
        function handleSearch(e) {
            const query = e.target.value.toLowerCase();
            const filtered = (currentView === 'favorites' ? favorites : customStations)
                .filter(station => 
                    station.name.toLowerCase().includes(query) || 
                    station.genre.toLowerCase().includes(query)
                );
            renderStations(filtered);
        }

        // Timer System
        function toggleTimerMenu(e) {
            e.stopPropagation();
            timerMenu.style.display = timerMenu.style.display === 'flex' ? 'none' : 'flex';
        }

        function setTimerFromMenu() {
            const minutes = parseInt(timerSelect.value);
            if(minutes > 0) setTimer(minutes);
            else clearTimer();
            timerMenu.style.display = 'none';
        }

        function setTimer(minutes) {
            clearTimer();
            
            const endTime = Date.now() + minutes * 60000;
            localStorage.setItem('timerEndTime', endTime.toString());
            
            timer = setTimeout(() => {
                audio.pause();
                updatePlayButton(false);
                showSuccessMessage('Sleep timer stopped playback');
                clearTimer();
            }, minutes * 60000);
            
            // Update timer display
            floatingTimer.classList.add('timer-active');
            updateTimerDisplay(minutes * 60);
            
            // Update every second
            timerInterval = setInterval(() => {
                const remainingSeconds = Math.round((endTime - Date.now()) / 1000);
                if (remainingSeconds <= 0) {
                    clearInterval(timerInterval);
                } else {
                    updateTimerDisplay(remainingSeconds);
                }
            }, 1000);
        }

        function clearTimer() {
            if(timer) clearTimeout(timer);
            if(timerInterval) clearInterval(timerInterval);
            floatingTimer.classList.remove('timer-active');
            localStorage.removeItem('timerEndTime');
        }

        function updateTimerDisplay(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            timerDisplay.textContent = `${mins}:${secs < 10 ? '0' : ''}${secs}`;
        }

        // Loading States
        function showLoading(show) {
            document.getElementById('loadingOverlay').style.display = show ? 'flex' : 'none';
        }

        // Message display
        function showErrorMessage(message) {
            const errorEl = document.createElement('div');
            errorEl.className = 'error-message';
            errorEl.textContent = message;
            document.body.appendChild(errorEl);
            setTimeout(() => errorEl.remove(), 3000);
        }

        function showSuccessMessage(message) {
            const successEl = document.createElement('div');
            successEl.className = 'error-message';
            successEl.style.backgroundColor = 'var(--success)';
            successEl.textContent = message;
            document.body.appendChild(successEl);
            setTimeout(() => successEl.remove(), 3000);
        }

        // PWA Installation
        let deferredPrompt;

        function handleInstallPrompt(e) {
            e.preventDefault();
            deferredPrompt = e;
            
            setTimeout(() => {
                const installPrompt = document.getElementById('installPrompt');
                installPrompt.classList.add('show');
            }, 30000);
        }

        async function installApp() {
            const installPrompt = document.getElementById('installPrompt');
            installPrompt.classList.remove('show');
            
            if(deferredPrompt) {
                deferredPrompt.prompt();
                const { outcome } = await deferredPrompt.userChoice;
                if(outcome === 'accepted') {
                    console.log('User accepted install');
                }
                deferredPrompt = null;
            }
        }

        function cancelInstall() {
            document.getElementById('installPrompt').classList.remove('show');
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>
